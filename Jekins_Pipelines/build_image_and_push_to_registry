pipeline {
    agent any

    environment {
        // Define the Docker registry, image name and tag
        IMAGE_NAME = 'imagination'
        IMAGE_TAG = 'latest'
        REGISTRY = 'qwerty'
        // Repository URL
        REPO_URL = 'https://github.com/resantinos/DevOPS-Training-DigitalOcean.git'
        
    }

    stages {
        stage('Clone Repository') {
            steps {
                // Clone the public GitHub repository
                sh "rm -rf ./workdir"
                sh "mkdir ./workdir"
                sh "git clone ${REPO_URL} ./workdir"
            }
        }

        stage('Docker Login') {
            steps {
                script {
                    // Use withCredentials to securely log in to Docker
                    withCredentials([usernamePassword(credentialsId: 'docker', passwordVariable: 'DOCKER_PASSWORD', usernameVariable: 'DOCKER_USERNAME')]) {
                        sh 'echo $DOCKER_PASSWORD | docker login registry.digitalocean.com -u "$DOCKER_USERNAME" --password-stdin'
                    }
                }
            }
        }

        stage('Build Docker Image') {
            steps {
                script {
                    withCredentials([
                        string(credentialsId: 'cert', variable: 'DB_CERT'),
                        string(credentialsId: 'db_hostname', variable: 'DB_HOSTNAME')
                    ]) {
                        // Directly call docker build without Groovy string interpolation
                        sh """
                        docker build --no-cache -f ./workdir/Dockerfiles/Dockerfile -t registry.digitalocean.com/${REGISTRY}/${IMAGE_NAME}:${IMAGE_TAG} \
                        --build-arg DB_CERT='${DB_CERT}' \
                        --build-arg DB_HOSTNAME='${DB_HOSTNAME}' \
                        .
                        """
                    }
                }
            }
        }

        stage('Push Docker Image') {
            steps {
                script {
                    sh "docker push registry.digitalocean.com/${REGISTRY}/${IMAGE_NAME}:${IMAGE_TAG}"
                    sh 'docker image list'
                }
            }
        }
    }
    post {
        always {
        script {
            // Remove the built Docker image to free up space
            sh "docker rmi registry.digitalocean.com/${REGISTRY}/imagination:latest"
            sh 'docker image list'
        }
        echo 'Post-build cleanup complete.'
        }
        success {
            echo 'Build succeeded.'

        }
        failure {
            echo 'Build failed.'
        }
    }
}
